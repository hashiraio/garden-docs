{
  "openapi": "3.1.0",
  "x-mcp": {
    "enabled": true
  },
  "info": {
    "title": "Garden API",
    "version": "2.0.0",
    "description": "API specification for various endpoints"
  },
  "servers": [
    {
      "url": "https://{environment}.garden.finance/v2",
      "variables": {
        "environment": {
          "default": "api",
          "enum": [
            "api",
            "testnet.api"
          ]
        }
      }
    }
  ],
  "security": [
    {
      "garden-app-id": []
    }
  ],
  "components": {
    "securitySchemes": {
      "garden-app-id": {
        "type": "apiKey",
        "name": "garden-app-id",
        "in": "header",
        "description": "If you do not yet have an app ID, please follow these [steps](/api-reference/setup)."
      }
    },
    "schemas": {
      "HTLCSchemaName": {
        "type": "string",
        "title": "htlc",
        "enum": [
          "evm:htlc",
          "evm:htlc_erc20",
          "solana:htlc",
          "solana:htlc_spltoken",
          "starknet:htlc",
          "starknet:htlc_erc20"
        ]
      },
      "TokenSchemaName": {
        "type": "string",
        "title": "token",
        "enum": [
          "evm:erc20",
          "solana:spltoken",
          "starknet:erc20"
        ]
      },
      "SchemaName": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/HTLCSchemaName"
          },
          {
            "$ref": "#/components/schemas/TokenSchemaName"
          }
        ]
      },
      "Chain": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": [
              "arbitrum",
              "base",
              "bera",
              "bitcoin",
              "botanix",
              "corn",
              "ethereum",
              "hyperliquid",
              "solana",
              "starknet"
            ]
          },
          {
            "type": "string",
            "title": "testnet",
            "enum": [
              "arbitrum_sepolia",
              "base_sepolia",
              "bitcoin_testnet",
              "citrea_testnet",
              "ethereum_sepolia",
              "hyperliquid_testnet",
              "monad_testnet",
              "solana_testnet",
              "starknet_sepolia"
            ]
          }
        ]
      },
      "ChainWithAssets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChainVerbose"
          },
          {
            "type": "object",
            "properties": {
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetVerbose"
                }
              }
            }
          }
        ]
      },
      "ChainVerbose": {
        "type": "object",
        "title": "Chain Information",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "icon": {
            "type": "string"
          },
          "confirmation_target": {
            "type": "integer"
          },
          "source_timelock": {
            "type": "string"
          },
          "destination_timelock": {
            "type": "string"
          },
          "supported_htlc_schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTLCSchemaName"
            }
          },
          "supported_token_schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenSchemaName"
            }
          }
        }
      },
      "AffiliateFeeAsset": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": [
              "arbitrum:usdc",
              "base:cbbtc",
              "base:usdc",
              "ethereum:cbbtc",
              "ethereum:seed",
              "ethereum:usdc"
            ]
          },
          {
            "type": "string",
            "title": "testnet",
            "enum": [
              "ethereum_sepolia:wbtc",
              "ethereum_sepolia:usdc"
            ]
          }
        ]
      },
      "AffiliateFeeItem": {
        "type": "object",
        "properties": {
          "total_earnings": {
            "type": "string"
          },
          "affiliate": {
            "type": "string"
          },
          "asset": {
            "$ref": "#/components/schemas/AffiliateFeeAsset"
          },
          "claim_amount": {
            "type": "string"
          },
          "claim_transaction": {
            "$ref": "#/components/schemas/EVMTransaction"
          }
        },
        "required": [
          "total_earnings",
          "affiliate",
          "asset"
        ]
      },
      "AffiliateFeesResponse": {
       "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AffiliateFeeItem"
                }
              }
            }
          }
        ]
      },
      "Asset": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": [
              "arbitrum:ibtc",
              "arbitrum:usdc",
              "arbitrum:wbtc",
              "base:cbbtc",
              "bera:lbtc",
              "base:usdc",
              "bitcoin:btc",
              "botanix:btc",
              "corn:btcn",
              "ethereum:cbbtc",
              "ethereum:wbtc",
              "ethereum:ibtc",
              "ethereum:seed",
              "ethereum:usdc",
              "hyperevm:ubtc",
              "solana:sol",
              "starknet:wbtc",
              "unichain:usdc",
              "unichain:wbtc"
            ]
          },
          {
            "type": "string",
            "title": "testnet",
            "enum": [
              "arbitrum_sepolia:seed",
              "arbitrum_sepolia:ibtc",
              "arbitrum_sepolia:wbtc",
              "base_sepolia:wbtc",
              "base_sepolia:usdt",
              "base_sepolia:ibtc",
              "bitcoin_testnet:btc",
              "citrea_testnet:cbtc",
              "citrea_testnet:wcbtc",
              "ethereum_sepolia:wbtc",
              "monad_testnet:cbbtc",
              "monad_testnet:usdc",
              "solana_testnet:sol",
              "starknet_sepolia:wbtc"
            ]
          }
        ]
      },
      "Contract": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/SchemaName"
          }
        },
        "nullable": true
      },
      "AssetVerbose": {
        "type": "object",
        "title": "Asset Information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Asset"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "icon": {
            "type": "string"
          },
          "htlc": {
            "$ref": "#/components/schemas/Contract"
          },
          "token": {
            "$ref": "#/components/schemas/Contract"
          },
          "decimals": {
            "type": "integer",
            "example": 8
          },
          "min_amount": {
            "type": "string"
          },
          "max_amount": {
            "type": "string"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "owner": {
            "type": "string"
          },
          "delegate": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "OrderStatus": {
        "type": "string",
        "title": "status",
        "enum": [
          "not-initiated", 
          "in-progress", 
          "completed", 
          "expired", 
          "refunded"
        ]
      },
      "Swap": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "swap_id": {
            "type": "string"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "initiator": {
            "type": "string"
          },
          "redeemer": {
            "type": "string"
          },
          "delegate": {
            "type": "string"
          },
          "timelock": {
            "type": "integer"
          },
          "filled_amount": {
            "type": "string"
          },
          "asset_price": {
            "type": "integer"
          },
          "amount": {
            "type": "string"
          },
          "secret_hash": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "instant_refund_tx": {
            "type": "string"
          },
          "initiate_tx_hash": {
            "type": "string"
          },
          "redeem_tx_hash": {
            "type": "string"
          },
          "refund_tx_hash": {
            "type": "string"
          },
          "initiate_block_number": {
            "type": "string",
            "nullable": true
          },
          "redeem_block_number": {
            "type": "string",
            "nullable": true
          },
          "refund_block_number": {
            "type": "string",
            "nullable": true
          },
          "required_confirmations": {
            "type": "integer"
          },
          "current_confirmations": {
            "type": "integer"
          },
          "initiate_timestamp": {
            "type": "string",
            "nullable": true
          },
          "redeem_timestamp": {
            "type": "string",
            "nullable": true
          },
          "refund_timestamp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "source_swap": {
            "$ref": "#/components/schemas/Swap"
          },
          "destination_swap": {
            "$ref": "#/components/schemas/Swap"
          },
          "slippage": {
            "type": "number",
            "example": 0.5
          },
          "nonce": {
            "type": "string"
          },
          "affiliate_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliateFee"
            }
          },
          "integrator": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "address": {
            "type": "string",
            "example": "0x057ff5cacab1d75df04e8e9d349f0d8dd92e87b989244b934d9b09bc99fc4173"
          }
        }
      },
      "Liquidity": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "balance": {
            "type": "string",
            "example": "3134508350"
          },
          "virtual_balance": {
            "type": "string",
            "example": "3134508350"
          },
          "readable_balance": {
            "type": "string",
            "example": "31.34508350"
          },
          "fiat_value": {
            "type": "string",
            "example": "3709623.9781701067"
          }
        }
      },
      "Solver": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "liquidity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Liquidity"
            }
          },
          "policy": {
            "$ref": "#/components/schemas/RoutePolicy"
          }
        }
      },
      "AffiliateFee": {
        "type": "object",
        "required": [],
        "properties": {
          "address": {
            "type": "string"
          },
          "asset": {
            "$ref": "#/components/schemas/AffiliateFeeAsset"
          },
          "fee": {
            "type": "integer",
            "description": "In BIPS (base index points) 100 bips = 1%",
            "example": 10
          }
        }
      },
      "OrderRequest": {
        "type": "object",
        "required": [
          "source",
          "destination"
        ],
        "properties": {
          "source": {
            "$ref": "#/components/schemas/Account"
          },
          "destination": {
            "$ref": "#/components/schemas/Account"
          },
          "slippage": {
            "type": "number",
            "description": "In BIPS (base index points) 100 bips = 1%",
            "example": 50
          },
          "secret_hash": {
            "type": "string",
            "example": "0x057ff5cacab1d75df04e8e9d349f0d8dd92e87b989244b934d9b09bc99fc4173"
          },
          "nonce": {
            "type": "string"
          },
          "affiliate_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliateFee"
            }
          }
        }
      },
      "InitiateActionRequest": {
        "type": "object",
        "title": "Initiate",
        "properties": {
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "signature"
        ]
      },
      "RedeemActionRequest": {
        "type": "object",
        "title": "Redeem",
        "properties": {
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "secret"
        ]
      },
      "RefundActionRequest": {
        "type": "object",
        "title": "Refund",
        "properties": {}
      },
      "InstantRefundActionRequest": {
        "type": "object",
        "title": "Instant Refund",
        "properties": {
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "signature"
        ]
      },
      "PaginatedOrders": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "page": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "total_items": {
            "type": "integer"
          },
          "per_page": {
            "type": "integer"
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "BitcoinInitiateRequest": {
        "type": "object",
        "required": [
          "order_id",
          "to",
          "amount"
        ],
        "properties": {
          "order_id": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "EVMTransaction": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "chain_id": {
            "type": "number"
          },
          "data": {
            "type": "string"
          },
          "gas_limit": {
            "type": "number"
          }
        }
      },
      "EVMTypedData": {
        "type": "object",
        "properties": {
          "types": {
            "properties": {
              "EIP712Domain": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "message": {
            "type": "object",
            "properties": {
              "redeemer": {
                "type": "string"
              },
              "timelock": {
                "type": "number"
              },
              "amount": {
                "type": "number"
              },
              "secretHash": {
                "type": "string"
              }
            }
          },
          "domain": {
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "chainId": {
                "type": "string"
              },
              "verifyingContract": {
                "type": "string"
              }
            }
          }
        }
      },
      "EVMInitiateRequest": {
        "type": "object",
        "required": [
          "order_id",
          "approval_transaction",
          "initiate_transaction",
          "typed_data"
        ],
        "properties": {
          "order_id": {
            "type": "string"
          },
          "approval_transaction": {
            "nullable": true,
            "$ref": "#/components/schemas/EVMTransaction",
            "description": "Can be `null`, if user has already given approval"
          },
          "initiate_transaction": {
            "$ref": "#/components/schemas/EVMTransaction"
          },
          "typed_data": {
            "$ref": "#/components/schemas/EVMTypedData"
          }
        }
      },
      "StarknetTransaction": {
        "type": "object",
        "properties": {
          "calldata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "selector": {
            "type": "string",
            "example": "0x2aed25fcd0101fcece997d93f9d0643dfa3fbd4118cae16bf7d6cd533577c28"
          },
          "to": {
            "type": "string",
            "example": "0x2448040b22b27f5a814756e67da005701e525658b162d4f0343d2e011bc6dad"
          }
        }
      },
      "StarknetTypedData": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "object",
            "properties": {
              "chainId": {
                "type": "string",
                "example": "SN_SEPOLIA"
              },
              "name": {
                "type": "string",
                "example": "HTLC"
              },
              "revision": {
                "type": "string",
                "example": "1"
              },
              "version": {
                "type": "string",
                "example": "1"
              }
            }
          },
          "message": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "string",
                    "example": "0x0"
                  },
                  "low": {
                    "type": "string",
                    "example": "0x2710"
                  }
                }
              },
              "redeemer": {
                "type": "string",
                "example": "2359173398359146340421805800175969296622423265566697169584810299233559668096"
              },
              "secretHash": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "example": [
                  1208377717,
                  3328794282,
                  2017733490,
                  901540904,
                  1502396360,
                  718117041,
                  1704147999,
                  3475506811
                ]
              },
              "timelock": {
                "type": "string",
                "example": "2880"
              }
            }
          },
          "primaryType": {
            "type": "string",
            "example": "Initiate"
          },
          "types": {
            "type": "object",
            "properties": {
              "Initiate": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              },
              "StarknetDomain": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "StarknetInitiateRequest": {
        "type": "object",
        "required": [
          "order_id",
          "approval_transaction",
          "initiate_transaction",
          "typed_data"
        ],
        "properties": {
          "order_id": {
            "type": "string"
          },
          "approval_transaction": {
            "nullable": true,
            "$ref": "#/components/schemas/StarknetTransaction",
            "description": "Can be `null`, if user has already given approval"
          },
          "initiate_transaction": {
            "nullable": true,
            "$ref": "#/components/schemas/StarknetTransaction"
          },
          "typed_data": {
            "$ref": "#/components/schemas/StarknetTypedData"
          }
        }
      },
      "SolanaInitiateRequest": {
        "type": "object",
        "required": [
          "order_id",
          "versioned_tx"
        ],
        "properties": {
          "order_id": {
            "type": "string"
          },
          "versioned_tx": {
            "type": "string"
          }
        }
      },
      "SuiInitiateRequest": {
        "type": "object",
        "required": [
          "order_id",
          "ptb_bytes"
        ],
        "properties": {
          "order_id": {
            "type": "string"
          },
          "ptb_bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "InitiateRequest": {
        "anyOf": [
          {
            "title": "bitcoin",
            "$ref": "#/components/schemas/BitcoinInitiateRequest"
          },
          {
            "title": "evm",
            "$ref": "#/components/schemas/EVMInitiateRequest"
          },
          {
            "title": "starknet",
            "$ref": "#/components/schemas/StarknetInitiateRequest"
          },
          {
            "title": "solana",
            "$ref": "#/components/schemas/SolanaInitiateRequest"
          },
          {
            "title": "sui",
            "$ref": "#/components/schemas/SuiInitiateRequest"
          }
        ]
      },
      "QuoteAsset": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "amount": {
            "type": "string",
            "example": "1000000"
          },
          "display": {
            "type": "string",
            "example": "0.01",
            "description": "USD Value"
          },
          "value": {
            "type": "string",
            "example": "100"
          }
        }
      },
      "Quote": {
        "type": "object",
        "properties": {
          "solver_id": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/QuoteAsset"
          },
          "destination": {
            "$ref": "#/components/schemas/QuoteAsset"
          }
        }
      },
      "SolverLiquidity": {
        "type": "object",
        "properties": {
          "solver_id": {
            "type": "string"
          },
          "liquidity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Liquidity"
            }
          }
        }
      },
      "CreateOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/InitiateRequest"
              }
            }
          }
        ]
      },
      "QuoteResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        ]
      },
      "LiquidityResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Liquidity"
                }
              }
            }
          }
        ]
      },
      "ResponseString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        ]
      },
      "InstantRefundHashResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Schema": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SchemaName"
          },
          "schema": {
            "type": "object"
          }
        }
      },
      "SchemaResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        ]
      },
      "SchemasResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        ]
      },
      "AssetsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetVerbose"
                }
              }
            }
          }
        ]
      },
      "ChainsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChainWithAssets"
                }
              }
            }
          }
        ]
      },
      "OrdersResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/PaginatedOrders"
              }
            }
          }
        ]
      },
      "OrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        ]
      },
      "ActionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RoutePolicy": {
        "type": "object",
        "title": "Route Policy Configuration",
        "properties": {
          "default": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "default": "open",
            "description": "Default policy for routes not covered by specific rules"
          },
          "isolation_groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ethereum:SEED <-> arbitrum:SEED"
            ],
            "description": "Assets in an isolation group can ONLY trade with other assets in the same group"
          },
          "blacklist_pairs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "bitcoin:BTC -> starknet:*",
              "*:USDC -> bitcoin:*"
            ],
            "description": "Explicitly forbidden trading pairs using pattern matching"
          },
          "whitelist_overrides": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ethereum:USDC -> bitcoin:BTC"
            ],
            "description": "Explicit overrides that bypass other restrictions"
          }
        }
      },
      "PolicyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RoutePolicy"
              }
            }
          }
        ]
      }
    }
  },
  "paths": {
    "/orders/{order}/instant-refund-hash": {
      "get": {
        "summary": "Get instant refund hash for the given swap.",
        "parameters": [
          {
            "in": "path",
            "name": "order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Swap with the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstantRefundHashResponse"
                }
              }
            }
          }
        }
      }
    },
    "/quote": {
      "get": {
        "description": "Get quote for the given asset pair.",
        "summary": "Get swap quote.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          {
            "in": "query",
            "name": "from_amount",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_amount",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "affiliate_fee",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Get server health.",
        "security": [],
        "responses": {
          "200": {
            "description": "Server is healthy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavilable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/chains": {
      "get": {
        "summary": "Get all the supported chains and assets.",
        "responses": {
          "200": {
            "description": "Object with supported chains and assets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "summary": "Get all the supported assets on the given chain.",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/liquidity": {
      "get": {
        "summary": "Get all the available liquidity.",
        "responses": {
          "200": {
            "description": "Array of solver-wise liquidity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fees": {
      "get": {
        "summary": "Get swap fees.",
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "garden-app-id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Garden app ID for affiliate fee information"
          }
        ],
        "responses": {
          "200": {
            "description": "Total swap fees or affiliate fees if garden-app-id is provided. For affiliate fees, claim_amount and claim_transaction are only included if the affiliate has not yet claimed their fees.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ResponseString",
                      "title": "Total Fees"
                    },
                    {
                      "$ref": "#/components/schemas/AffiliateFeesResponse",
                      "title": "Affiliate Fees"
                    }
                  ]
                },
                "examples": {
                  "total-fees": {
                    "summary": "Total Fees Response",
                    "value": {
                      "success": true,
                      "result": "2668122"
                    }
                  },
                  "affiliate-fees": {
                    "summary": "Affiliate Fees Response",
                    "value": {
                      "success": true,
                      "result": [
                        {
                          "total_earnings": "150750000",
                          "affiliate": "0x004Cc75ACF4132Fc08cB6a252E767804F303F729",
                          "asset": "ethereum:usdc",
                          "claim_amount": "50750000",
                          "claim_transaction": {
                            "to": "0x5EbEC4D8DA437b2BAD656D43d40fE412bA5D217a",
                            "value": "0x0",
                            "chain_id": 1,
                            "data": "0x4ede0ab7000000000000000000000000661ba32eb5f86cab358ddbb7f264b10c5825e2dd0000000000000000000000000000000000000000000000000000000000069780000000000000000000000000000000000000000000000000000000000000c3503331ff69aca609e06dcd4b97223667611d66bb4e8b56e26fc0ff53c49a1ed04d00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000",
                            "gas_limit": "0x30d40"
                          }
                        },
                        {
                          "total_earnings": "3000000",
                          "affiliate": "0x004Cc75ACF4132Fc08cB6a252E767804F303F729",
                          "asset": "ethereum:cbbtc"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volume": {
      "get": {
        "summary": "Get swap volume.",
        "responses": {
          "200": {
            "description": "Total swap volume.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseString"
                }
              }
            }
          }
        }
      }
    },
    "/schemas": {
      "get": {
        "summary": "Get all supported contract schemas.",
        "responses": {
          "200": {
            "description": "The ABI for EVM, Starknet contracts and IDL for Solana contracts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schemas/{name}": {
      "get": {
        "summary": "Get contract schema.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SchemaName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ABI for EVM contracts or IDL for Solana contracts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get all orders.",
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string"
            },
            "description": "Filter orders by address"
          },
          {
            "in": "query",
            "name": "tx_hash",
            "schema": {
              "type": "string"
            },
            "description": "Filter orders by transaction hash"
          },
          {
            "in": "query",
            "name": "from_chain",
            "schema": {
              "type": "string"
            },
            "description": "Filter orders by source chain"
          },
          {
            "in": "query",
            "name": "to_chain",
            "schema": {
              "type": "string"
            },
            "description": "Filter orders by destination chain"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter orders by status. Comma-separated string with allowed values: not-initiated, in-progress, completed, expired, refunded. Example: status=not-initiated,in-progress",
            "example": "not-initiated,in-progress"
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Object with required information to initiate order on source chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order}": {
      "get": {
        "summary": "Get matched order by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object with order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update swap by doing an action.",
        "tags": [
          "Swaps"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "initiate",
                "redeem",
                "refund",
                "instant-refund"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/InitiateActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RedeemActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RefundActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/InstantRefundActionRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Executed action successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}": {
      "get": {
        "summary": "Get solver details.",
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object with solver response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolverResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}/orders": {
      "get": {
        "summary": "Get all matched orders by solver.",
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solver's matched orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user}/orders": {
      "get": {
        "summary": "Get all matched orders by user.",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's matched orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user}/count": {
      "get": {
        "summary": "Get order count for user.",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's order count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}/liquidity": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get liquidity information.",
        "responses": {
          "200": {
            "description": "Liquidity information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Liquidity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policy": {
      "get": {
        "summary": "Get route policy configuration.",
        "responses": {
          "200": {
            "description": "Route policy configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                },
                "example": {
                  "status": "Ok",
                  "result": {
                    "default": "open",
                    "isolation_groups": [
                      "ethereum:SEED <-> arbitrum:SEED"
                    ],
                    "blacklist_pairs": [
                      "bitcoin:BTC -> starknet:*"
                    ],
                    "whitelist_overrides": []
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}